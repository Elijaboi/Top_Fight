{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"List of plugins \u00b6 Firebase/broadcast : Broadcast real-time messages, using firebase-database. Firebase/files : Save JSON data, using firebase-firestore. Firebase/ID-alias : Map an unique ID to another unique ID, using firebase-firestore. Firebase/Item-table : 1d/2d/3d table, using firebase-database. Firebase/leaderboard : Descending sort scores, using firebase-firestore. Firebase/online-user-list : Online user list, using firebase-database. Firebase/single-room : Chat room, using firebase-database.","title":"Home"},{"location":"#list-of-plugins","text":"Firebase/broadcast : Broadcast real-time messages, using firebase-database. Firebase/files : Save JSON data, using firebase-firestore. Firebase/ID-alias : Map an unique ID to another unique ID, using firebase-firestore. Firebase/Item-table : 1d/2d/3d table, using firebase-database. Firebase/leaderboard : Descending sort scores, using firebase-firestore. Firebase/online-user-list : Online user list, using firebase-database. Firebase/single-room : Chat room, using firebase-database.","title":"List of plugins"},{"location":"firebase-broadcast/","text":"Introduction \u00b6 Broadcast real-time messages, using firebase-database . Author: Rex Usage \u00b6 Sample code Install plugin \u00b6 Load minify file \u00b6 Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add messager object var messager = rexFire . add . broadcast ( config ); Import plugin \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add messager object var messager = rexFire . add . broadcast ( config ); Import class \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { Broadcast } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add messager object var messager = new Broadcast ( config ); Create instance \u00b6 var messager = rexFire . add . broadcast ({ root : '' , // receiverID: '', // history: 0 }); root : Path of this messager. receiverID : ID of receiver/channel. history : Stored received (history) messages in client side. 0 , or false : No history message stored. -1 , or true : Infinity history message stored. i.e. store all messages from starting updating. A number larger then 0 : Length of stored history message. Send message \u00b6 Set sender in config, or setSender method. messager . setSender ( userID , userName ); or messager . setSender ({ userID : userID , userName : userName }); userID : User ID of sender. userName : Display name of sender. Set receiver in config, or setReceiver method. messager . setReceiver ( receiverID ); receiverID : ID of receiver/channel. Send message to receiverID. messager . send ( message ); message : A string message, or a JSON data. Receive messages \u00b6 Register receive event messager . on ( 'receive' , function ( data ){ // var senderID = data.senderID; // var senderName = data.senderName; // var message = data.message; }) Set receiver in config, or setReceiver method messager . setReceiver ( receiverID ); receiverID : ID of receiver/channel. Start receiving messager . startReceiving (); Stop receive messager . stopReceiving (); Only receive messages after invoking startReceiving method. Previous messages won't be got anymore. Received messages \u00b6 Received messages will be saved in client side. Get received (history) messages. var messages = messager . getHistory (); Clear history messages. messager . clearHistory ();","title":"Broadcast"},{"location":"firebase-broadcast/#introduction","text":"Broadcast real-time messages, using firebase-database . Author: Rex","title":"Introduction"},{"location":"firebase-broadcast/#usage","text":"Sample code","title":"Usage"},{"location":"firebase-broadcast/#install-plugin","text":"","title":"Install plugin"},{"location":"firebase-broadcast/#load-minify-file","text":"Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add messager object var messager = rexFire . add . broadcast ( config );","title":"Load minify file"},{"location":"firebase-broadcast/#import-plugin","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add messager object var messager = rexFire . add . broadcast ( config );","title":"Import plugin"},{"location":"firebase-broadcast/#import-class","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { Broadcast } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add messager object var messager = new Broadcast ( config );","title":"Import class"},{"location":"firebase-broadcast/#create-instance","text":"var messager = rexFire . add . broadcast ({ root : '' , // receiverID: '', // history: 0 }); root : Path of this messager. receiverID : ID of receiver/channel. history : Stored received (history) messages in client side. 0 , or false : No history message stored. -1 , or true : Infinity history message stored. i.e. store all messages from starting updating. A number larger then 0 : Length of stored history message.","title":"Create instance"},{"location":"firebase-broadcast/#send-message","text":"Set sender in config, or setSender method. messager . setSender ( userID , userName ); or messager . setSender ({ userID : userID , userName : userName }); userID : User ID of sender. userName : Display name of sender. Set receiver in config, or setReceiver method. messager . setReceiver ( receiverID ); receiverID : ID of receiver/channel. Send message to receiverID. messager . send ( message ); message : A string message, or a JSON data.","title":"Send message"},{"location":"firebase-broadcast/#receive-messages","text":"Register receive event messager . on ( 'receive' , function ( data ){ // var senderID = data.senderID; // var senderName = data.senderName; // var message = data.message; }) Set receiver in config, or setReceiver method messager . setReceiver ( receiverID ); receiverID : ID of receiver/channel. Start receiving messager . startReceiving (); Stop receive messager . stopReceiving (); Only receive messages after invoking startReceiving method. Previous messages won't be got anymore.","title":"Receive messages"},{"location":"firebase-broadcast/#received-messages","text":"Received messages will be saved in client side. Get received (history) messages. var messages = messager . getHistory (); Clear history messages. messager . clearHistory ();","title":"Received messages"},{"location":"firebase-files/","text":"Introduction \u00b6 Save JSON data, using firebase-firestore . Each owner has several files, each file contains header and content indexed by fileID. Author: Rex Usage \u00b6 Sample code Install plugin \u00b6 Load minify file \u00b6 Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add file-manager object var fileManager = rexFire . add . files ( config ); Import plugin \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add file-manager object var fileManager = rexFire . add . files ( config ); Import class \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { Files } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add file-manager object var fileManager = new Files ( config ); Create instance \u00b6 var fileManager = rexFire . add . files ({ root : '' }); root : Collection name of these files. Save file \u00b6 Set file owner. fileManager . setOwner ( userID ); or fileManager . setOwner ({ userID : userID }); userID : User ID of file owner. Save header and content data. Overwrite fileManager . save ( fileID , header , content ); fileID : Unique ID of this file. header : Header data for indexing, a JSON object. Reserve keys : userID , fileID , type , contentDocID . (i.e. don't use these keys) content : Content/body, a JSON object. Reserve keys : userID , fileID , type . (i.e. don't use these keys) Update fileManager . save ( fileID , header , content , true ); Load headers \u00b6 Set file owner. fileManager . setOwner ( userID ); Load all headers of this file owner. fileManager . loadHeaders () . then ( function ( result ) { // var headers = result.headers; // var userID = result.userID; }) . catch ( function ( result ) { // var error = result.error; // var userID = result.userID; }) headers : An array of header objects. Each header contains these key header.fileID : Unique ID of this file. header.userID : User ID of file owner. Load file \u00b6 Set file owner. fileManager . setOwner ( userID ); Load file. fileManager . load ( fileID ) . then ( function ( result ) { // var header = result.header; // var content = result.content; // var fileID = result.fileID; // var userID = result.userID; }) . catch ( function ( result ) { // var error = result.error; // var fileID = result.fileID; // var userID = result.userID; }) header , content : Header/content of this file. fileID : Unique ID of this file. userID : User ID of file owner.","title":"Files"},{"location":"firebase-files/#introduction","text":"Save JSON data, using firebase-firestore . Each owner has several files, each file contains header and content indexed by fileID. Author: Rex","title":"Introduction"},{"location":"firebase-files/#usage","text":"Sample code","title":"Usage"},{"location":"firebase-files/#install-plugin","text":"","title":"Install plugin"},{"location":"firebase-files/#load-minify-file","text":"Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add file-manager object var fileManager = rexFire . add . files ( config );","title":"Load minify file"},{"location":"firebase-files/#import-plugin","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add file-manager object var fileManager = rexFire . add . files ( config );","title":"Import plugin"},{"location":"firebase-files/#import-class","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { Files } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add file-manager object var fileManager = new Files ( config );","title":"Import class"},{"location":"firebase-files/#create-instance","text":"var fileManager = rexFire . add . files ({ root : '' }); root : Collection name of these files.","title":"Create instance"},{"location":"firebase-files/#save-file","text":"Set file owner. fileManager . setOwner ( userID ); or fileManager . setOwner ({ userID : userID }); userID : User ID of file owner. Save header and content data. Overwrite fileManager . save ( fileID , header , content ); fileID : Unique ID of this file. header : Header data for indexing, a JSON object. Reserve keys : userID , fileID , type , contentDocID . (i.e. don't use these keys) content : Content/body, a JSON object. Reserve keys : userID , fileID , type . (i.e. don't use these keys) Update fileManager . save ( fileID , header , content , true );","title":"Save file"},{"location":"firebase-files/#load-headers","text":"Set file owner. fileManager . setOwner ( userID ); Load all headers of this file owner. fileManager . loadHeaders () . then ( function ( result ) { // var headers = result.headers; // var userID = result.userID; }) . catch ( function ( result ) { // var error = result.error; // var userID = result.userID; }) headers : An array of header objects. Each header contains these key header.fileID : Unique ID of this file. header.userID : User ID of file owner.","title":"Load headers"},{"location":"firebase-files/#load-file","text":"Set file owner. fileManager . setOwner ( userID ); Load file. fileManager . load ( fileID ) . then ( function ( result ) { // var header = result.header; // var content = result.content; // var fileID = result.fileID; // var userID = result.userID; }) . catch ( function ( result ) { // var error = result.error; // var fileID = result.fileID; // var userID = result.userID; }) header , content : Header/content of this file. fileID : Unique ID of this file. userID : User ID of file owner.","title":"Load file"},{"location":"firebase-idalias/","text":"Introduction \u00b6 Map an unique ID to another unique ID (alias), using firebase-firestore . Each owner has several files, each file contains header and content indexed by fileID. Author: Rex Live demos \u00b6 Get random alias Usage \u00b6 Sample code Install plugin \u00b6 Load minify file \u00b6 Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add id-alias object var idAlias = rexFire . add . idAlias ( config ); Import plugin \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add id-alias object var idAlias = rexFire . add . idAlias ( config ); Import class \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { IdAlias } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add id-alias object var idAlias = new IdAlias ( config ); Create instance \u00b6 var idAlias = rexFire . add . idAlias ({ root : '' }); root : Collection name of this id-alias. Random alias \u00b6 Get alias of an id, or register an alias from a random word. idAlias . getRandomAlias ( id , { digits : 10 , candidates : '0123456789' , retry : 1000 }) . then ( function ( result ) { // var alias = result.alias; // var id = result.id; }) . catch ( function ( error ) { }) id : An unique ID. digits : String length of alias. candidates : Candidate characters. retry : Max retry count. Specific alias \u00b6 Add a specific alias idAlias . add ( id , alias ) . then ( function ( result ) { // var alias = result.alias; // var id = result.id; }) . catch ( function ( error ) { }) id : An unique ID. alias : Another unique ID. Get ID from alias idAlias . getId ( alias ) . then ( function ( result ) { // var alias = result.alias; // var id = result.id; // Return undefined if alias is not existed. }) . catch ( function ( error ) { }) Get alias from ID idAlias . getAlias ( id ) . then ( function ( result ) { // var alias = result.alias; // Return undefined if id is not existed. // var id = result.id; }) . catch ( function ( error ) { })","title":"ID-alias"},{"location":"firebase-idalias/#introduction","text":"Map an unique ID to another unique ID (alias), using firebase-firestore . Each owner has several files, each file contains header and content indexed by fileID. Author: Rex","title":"Introduction"},{"location":"firebase-idalias/#live-demos","text":"Get random alias","title":"Live demos"},{"location":"firebase-idalias/#usage","text":"Sample code","title":"Usage"},{"location":"firebase-idalias/#install-plugin","text":"","title":"Install plugin"},{"location":"firebase-idalias/#load-minify-file","text":"Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add id-alias object var idAlias = rexFire . add . idAlias ( config );","title":"Load minify file"},{"location":"firebase-idalias/#import-plugin","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add id-alias object var idAlias = rexFire . add . idAlias ( config );","title":"Import plugin"},{"location":"firebase-idalias/#import-class","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { IdAlias } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add id-alias object var idAlias = new IdAlias ( config );","title":"Import class"},{"location":"firebase-idalias/#create-instance","text":"var idAlias = rexFire . add . idAlias ({ root : '' }); root : Collection name of this id-alias.","title":"Create instance"},{"location":"firebase-idalias/#random-alias","text":"Get alias of an id, or register an alias from a random word. idAlias . getRandomAlias ( id , { digits : 10 , candidates : '0123456789' , retry : 1000 }) . then ( function ( result ) { // var alias = result.alias; // var id = result.id; }) . catch ( function ( error ) { }) id : An unique ID. digits : String length of alias. candidates : Candidate characters. retry : Max retry count.","title":"Random alias"},{"location":"firebase-idalias/#specific-alias","text":"Add a specific alias idAlias . add ( id , alias ) . then ( function ( result ) { // var alias = result.alias; // var id = result.id; }) . catch ( function ( error ) { }) id : An unique ID. alias : Another unique ID. Get ID from alias idAlias . getId ( alias ) . then ( function ( result ) { // var alias = result.alias; // var id = result.id; // Return undefined if alias is not existed. }) . catch ( function ( error ) { }) Get alias from ID idAlias . getAlias ( id ) . then ( function ( result ) { // var alias = result.alias; // Return undefined if id is not existed. // var id = result.id; }) . catch ( function ( error ) { })","title":"Specific alias"},{"location":"firebase-itemtable/","text":"Introduction \u00b6 1d/2d/3d table, using firebase-database . Author: Rex Usage \u00b6 Sample code Install plugin \u00b6 Load minify file \u00b6 Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add table object var table = rexFire . add . itemTable ( config ); Import plugin \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add table object var table = rexFire . add . itemTable ( config ); Import class \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { ItemTable } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add table object var table = new ItemTable ( config ); Create instance \u00b6 var table = rexFire . add . itemTable ({ root : '' , type : 3 }); root : Path of this item table. type : Table type. 1 , or '1d' : 1d table, indexing by (key0) 2 , or '2d' : 2d table, indexing by (key0, key1) 3 , or '3d' : 3d table, indexing by (key0, key1, key2) Write \u00b6 Set data table . setData ( key0 , value ) // table.setData(key0, key1, value) // table.setData(key0, key1, key2, value) . then ( function () { }) . catch ( function () { }) key0 , key1 , key2 : Any string. value : Number, string, or JSON data. Increase value table . incValue ( key0 , value ) // table.incValue(key0, key1, value) // table.incValue(key0, key1, key2, value) . then ( function () { }) . catch ( function () { }) key0 , key1 , key2 : Any string. value : Number. Remove key table . removeData ( key0 ) // table.removeData(key0, key1) // table.inremoveDatacValue(key0, key1, key2) . then ( function () { }) . catch ( function () { }) key0 , key1 , key2 : Any string. Batch writing specific values at key pathes table . updateData ({ ` ${ key0 } ` : value0 , ` ${ key0 } / ${ key1 } ` : value1 , ` ${ key0 } / ${ key1 } / ${ key2 } ` : value2 , ... }) . then ( function () { }) . catch ( function () { }) Transaction, write new value according to latest value table . transaction ( key0 , callback ) // table.transaction(key0, key1, callback) // table.transaction(key0, key1, key2, callback) . then ( function () { }) . catch ( function () { }) key0 , key1 , key2 : Any string. callback : Write new value according to latest value. function ( preValue ) { return newValue ; } Remove key when current user disconnect table . removeDataOnDisconnect ( key0 ) // table.removeDataOnDisconnect(key0, key1) // table.removeDataOnDisconnect(key0, key1, key2) . then ( function () { }) . catch ( function () { }) Set value when current user disconnect table . setDataOnDisconnect ( key0 ) // table.setDataOnDisconnect(key0, key1) // table.setDataOnDisconnect(key0, key1, key2) . then ( function () { }) . catch ( function () { }) Read \u00b6 Start updating table . startUpdate (); Trigger 'init' event when all data read back. table.initialFlag : Return true when all data read back. Stop updating table . stopUpdate (); Read data stored in client var data = table . getData ( key0 ); // var data = table.getData(key0, key1); // var data = table.getData(key0, key1, key2); data : Number, string, or JSON data. Clone data stored in client var data = table . cloneData ( key0 ); // var data = table.cloneData(key0, key1); // var data = table.cloneData(key0, key1, key2); Events \u00b6 Initialize, read all data back after start updating table . on ( 'init' , function ( data ) { }) data : Table data. table.initialFlag will be set to true . Any value updated table . on ( 'update' , function ( data ) { }) data : Table data. 1d table \u00b6 1d table, indexing by (key0) On add key0 table . on ( 'addkey0' , function ( key0 , value ) { }); On remove key0 table . on ( 'removekey0' , function ( key0 ) { }); On change key0 table . on ( 'changekey0' , function ( key0 , value ) { }); 2d table \u00b6 2d table, indexing by (key0, key1) On add key0 table . on ( 'addkey0' , function ( key0 , value ) { }); On remove key0 table . on ( 'removekey0' , function ( key0 ) { }); On add key1 table . on ( 'addkey1' , function ( key0 , key1 , value ) { }); On remove key1 table . on ( 'removekey1' , function ( key0 , key1 ) { }); On change key1 table . on ( 'changekey1' , function ( key0 , key1 , value ) { }); 3d table \u00b6 3d table, indexing by (key0, key1, key2) On add key0 table . on ( 'addkey0' , function ( key0 , value ) { }); On remove key0 table . on ( 'removekey0' , function ( key0 ) { }); On add key1 table . on ( 'addkey1' , function ( key0 , key1 , value ) { }); On remove key1 table . on ( 'removekey1' , function ( key0 , key1 ) { }); On add key2 table . on ( 'addkey2' , function ( key0 , key1 , key2 , value ) { }); On remove key2 table . on ( 'removekey2' , function ( key0 , key1 , key2 ) { }); On change key2 table . on ( 'changekey2' , function ( key0 , key1 , key2 , value ) { });","title":"Item table"},{"location":"firebase-itemtable/#introduction","text":"1d/2d/3d table, using firebase-database . Author: Rex","title":"Introduction"},{"location":"firebase-itemtable/#usage","text":"Sample code","title":"Usage"},{"location":"firebase-itemtable/#install-plugin","text":"","title":"Install plugin"},{"location":"firebase-itemtable/#load-minify-file","text":"Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add table object var table = rexFire . add . itemTable ( config );","title":"Load minify file"},{"location":"firebase-itemtable/#import-plugin","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add table object var table = rexFire . add . itemTable ( config );","title":"Import plugin"},{"location":"firebase-itemtable/#import-class","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { ItemTable } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add table object var table = new ItemTable ( config );","title":"Import class"},{"location":"firebase-itemtable/#create-instance","text":"var table = rexFire . add . itemTable ({ root : '' , type : 3 }); root : Path of this item table. type : Table type. 1 , or '1d' : 1d table, indexing by (key0) 2 , or '2d' : 2d table, indexing by (key0, key1) 3 , or '3d' : 3d table, indexing by (key0, key1, key2)","title":"Create instance"},{"location":"firebase-itemtable/#write","text":"Set data table . setData ( key0 , value ) // table.setData(key0, key1, value) // table.setData(key0, key1, key2, value) . then ( function () { }) . catch ( function () { }) key0 , key1 , key2 : Any string. value : Number, string, or JSON data. Increase value table . incValue ( key0 , value ) // table.incValue(key0, key1, value) // table.incValue(key0, key1, key2, value) . then ( function () { }) . catch ( function () { }) key0 , key1 , key2 : Any string. value : Number. Remove key table . removeData ( key0 ) // table.removeData(key0, key1) // table.inremoveDatacValue(key0, key1, key2) . then ( function () { }) . catch ( function () { }) key0 , key1 , key2 : Any string. Batch writing specific values at key pathes table . updateData ({ ` ${ key0 } ` : value0 , ` ${ key0 } / ${ key1 } ` : value1 , ` ${ key0 } / ${ key1 } / ${ key2 } ` : value2 , ... }) . then ( function () { }) . catch ( function () { }) Transaction, write new value according to latest value table . transaction ( key0 , callback ) // table.transaction(key0, key1, callback) // table.transaction(key0, key1, key2, callback) . then ( function () { }) . catch ( function () { }) key0 , key1 , key2 : Any string. callback : Write new value according to latest value. function ( preValue ) { return newValue ; } Remove key when current user disconnect table . removeDataOnDisconnect ( key0 ) // table.removeDataOnDisconnect(key0, key1) // table.removeDataOnDisconnect(key0, key1, key2) . then ( function () { }) . catch ( function () { }) Set value when current user disconnect table . setDataOnDisconnect ( key0 ) // table.setDataOnDisconnect(key0, key1) // table.setDataOnDisconnect(key0, key1, key2) . then ( function () { }) . catch ( function () { })","title":"Write"},{"location":"firebase-itemtable/#read","text":"Start updating table . startUpdate (); Trigger 'init' event when all data read back. table.initialFlag : Return true when all data read back. Stop updating table . stopUpdate (); Read data stored in client var data = table . getData ( key0 ); // var data = table.getData(key0, key1); // var data = table.getData(key0, key1, key2); data : Number, string, or JSON data. Clone data stored in client var data = table . cloneData ( key0 ); // var data = table.cloneData(key0, key1); // var data = table.cloneData(key0, key1, key2);","title":"Read"},{"location":"firebase-itemtable/#events","text":"Initialize, read all data back after start updating table . on ( 'init' , function ( data ) { }) data : Table data. table.initialFlag will be set to true . Any value updated table . on ( 'update' , function ( data ) { }) data : Table data.","title":"Events"},{"location":"firebase-itemtable/#1d-table","text":"1d table, indexing by (key0) On add key0 table . on ( 'addkey0' , function ( key0 , value ) { }); On remove key0 table . on ( 'removekey0' , function ( key0 ) { }); On change key0 table . on ( 'changekey0' , function ( key0 , value ) { });","title":"1d table"},{"location":"firebase-itemtable/#2d-table","text":"2d table, indexing by (key0, key1) On add key0 table . on ( 'addkey0' , function ( key0 , value ) { }); On remove key0 table . on ( 'removekey0' , function ( key0 ) { }); On add key1 table . on ( 'addkey1' , function ( key0 , key1 , value ) { }); On remove key1 table . on ( 'removekey1' , function ( key0 , key1 ) { }); On change key1 table . on ( 'changekey1' , function ( key0 , key1 , value ) { });","title":"2d table"},{"location":"firebase-itemtable/#3d-table","text":"3d table, indexing by (key0, key1, key2) On add key0 table . on ( 'addkey0' , function ( key0 , value ) { }); On remove key0 table . on ( 'removekey0' , function ( key0 ) { }); On add key1 table . on ( 'addkey1' , function ( key0 , key1 , value ) { }); On remove key1 table . on ( 'removekey1' , function ( key0 , key1 ) { }); On add key2 table . on ( 'addkey2' , function ( key0 , key1 , key2 , value ) { }); On remove key2 table . on ( 'removekey2' , function ( key0 , key1 , key2 ) { }); On change key2 table . on ( 'changekey2' , function ( key0 , key1 , key2 , value ) { });","title":"3d table"},{"location":"firebase-leaderboard/","text":"Introduction \u00b6 Descending sort scores, using firebase-firestore . Author: Rex Live demos \u00b6 Post & paging Usage \u00b6 Sample code Install plugin \u00b6 Load minify file \u00b6 Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add leader-board object var leaderBoard = rexFire . add . leaderBoard ( config ); Import plugin \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add leader-board object var leaderBoard = rexFire . add . leaderBoard ( config ); Import class \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { LeaderBoard } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add leader-board object var leaderBoard = new LeaderBoard ( config ); Create instance \u00b6 var leaderBoard = rexFire . add . leaderBoard ({ root : '' , // timeFilters: false, // timeFilterType: 'year', // pageItemCount: 100, // boardID: undefined, // tag: undefined }); root : Collection name of this leaderboard. timeFilters : Time filter of day/week/month/year. false : Don't use any time filter. true : Enable all time filters. JSON object, enable some time filters. { day : true , week : true , month : true , year : true } timeFilterType : Type of time filter. 'day' , or 'd' : Filter scores by current day. 'week' , or 'w' : Filter scores by current week. 'month' , 'm' : Filter scores by current month. 'year' , 'y' : Filter scores by current year. Default value. pageItemCount : Item count of a page, default value is 100 boardID : Board ID, optional. tag : Custom tag, optional. Time filter enabled Add indexes if time filter is enabled. - tagD (ascending), scoreD (descending), boardID (ascending), tag (ascending) - tagW (ascending), scoreW (descending), boardID (ascending), tag (ascending) - tagM (ascending), scoreM (descending), boardID (ascending), tag (ascending) - tagY (ascending), scoreY (descending), boardID (ascending), tag (ascending) Post score \u00b6 Set user. leaderBoard . setUser ( userID , userName ); or leaderBoard . setUser ({ userID : userID , userName : userName }); userID : User ID. userName : Display name of user, optional. Set board property, optional. Board ID leaderBoard . setBoardID ( boardID ); Custom tag leaderBoard . setTag ( tag ); Post score leaderBoard . post ( score ) // leaderBoard.post(score, extraData) // leaderBoard.post(score, extraData, timestamp) . then ( function ( record ) { }) . catch ( function ( error ) { }) score : A number, scores will be sorted descend. extraData : Extra data in JSON format. timestamp : Timestamp of posting. undefined : Current time. A number : For debug usage Get my score \u00b6 leaderBoard . getScore () // leaderBoard.getScore(userID) . then ( function ( score ) { }) . catch ( function ( error ) { }) userID : User ID, optional. undefined : Current user ID. score : Score object. Time filter enabled : {userID, scoreD, scoreW, scoreM, scoreY, tagD, tagW, tagM, tagY} scoreD , scoreW , scoreM , scoreY : Score of day/week/month/year. tagD , tagW , tagM , tagY : Time tag of day/week/month/year. Time filter disabled : {userID, score} Get my rank \u00b6 leaderBoard . getRank () // leaderBoard.getRank(userID) . then ( function ( rank ) { }) . catch ( function ( error ) { }) userID : User ID, optional. undefined : Current user ID. rank : Rank object. {userID, rank} Get scores \u00b6 Set board property, optional. Board ID leaderBoard . setBoardID ( boardID ); Custom tag leaderBoard . setTag ( tag ); Set time filter, optional. leaderBoard . setTimeFilterType ( type ); type : 'day' , or 'd' : Filter scores by current day. 'week' , or 'w' : Filter scores by current week. 'month' , 'm' : Filter scores by current month. 'year' , 'y' : Filter scores by current year. Load scores page by page. Load first page. leaderBoard . loadFirstPage () . then ( function ( scores ) { }) . catch ( function ( error ) { }) scores : An array of score object. Each score object is {userID, userName, socre} Load next page. leaderBoard . loadNextPage () . then ( function ( scores ) { }) . catch ( function ( error ) { }) scores : An array of score object. Each score object is {userID, userName, socre} Load previous page. leaderBoard . loadPreviousPage () . then ( function ( scores ) { }) . catch ( function ( error ) { }) scores : An array of score object. Each score object is {userID, userName, socre} Reload current page. leaderBoard . loadCurrentPage () . then ( function ( scores ) { }) . catch ( function ( error ) { }) scores : An array of score object. Each score object is {userID, userName, socre} Page index \u00b6 Current page index var pageIndex = leaderBoard . pageIndex ; Is first page var isFirstPage = leaderBoard . isFirstPage ; Is last page var isLastPage = leaderBoard . isLastPage ; Delete \u00b6 Delete user leaderBoard . deleteUserScore ( userID ) . then ( function (){ }) . catch ( function (){ }) Delete board leaderBoard . deleteBoard ( boardID , tag ) . then ( function (){ }) . catch ( function (){ })","title":"Leaderboard"},{"location":"firebase-leaderboard/#introduction","text":"Descending sort scores, using firebase-firestore . Author: Rex","title":"Introduction"},{"location":"firebase-leaderboard/#live-demos","text":"Post & paging","title":"Live demos"},{"location":"firebase-leaderboard/#usage","text":"Sample code","title":"Usage"},{"location":"firebase-leaderboard/#install-plugin","text":"","title":"Install plugin"},{"location":"firebase-leaderboard/#load-minify-file","text":"Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add leader-board object var leaderBoard = rexFire . add . leaderBoard ( config );","title":"Load minify file"},{"location":"firebase-leaderboard/#import-plugin","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add leader-board object var leaderBoard = rexFire . add . leaderBoard ( config );","title":"Import plugin"},{"location":"firebase-leaderboard/#import-class","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { LeaderBoard } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add leader-board object var leaderBoard = new LeaderBoard ( config );","title":"Import class"},{"location":"firebase-leaderboard/#create-instance","text":"var leaderBoard = rexFire . add . leaderBoard ({ root : '' , // timeFilters: false, // timeFilterType: 'year', // pageItemCount: 100, // boardID: undefined, // tag: undefined }); root : Collection name of this leaderboard. timeFilters : Time filter of day/week/month/year. false : Don't use any time filter. true : Enable all time filters. JSON object, enable some time filters. { day : true , week : true , month : true , year : true } timeFilterType : Type of time filter. 'day' , or 'd' : Filter scores by current day. 'week' , or 'w' : Filter scores by current week. 'month' , 'm' : Filter scores by current month. 'year' , 'y' : Filter scores by current year. Default value. pageItemCount : Item count of a page, default value is 100 boardID : Board ID, optional. tag : Custom tag, optional. Time filter enabled Add indexes if time filter is enabled. - tagD (ascending), scoreD (descending), boardID (ascending), tag (ascending) - tagW (ascending), scoreW (descending), boardID (ascending), tag (ascending) - tagM (ascending), scoreM (descending), boardID (ascending), tag (ascending) - tagY (ascending), scoreY (descending), boardID (ascending), tag (ascending)","title":"Create instance"},{"location":"firebase-leaderboard/#post-score","text":"Set user. leaderBoard . setUser ( userID , userName ); or leaderBoard . setUser ({ userID : userID , userName : userName }); userID : User ID. userName : Display name of user, optional. Set board property, optional. Board ID leaderBoard . setBoardID ( boardID ); Custom tag leaderBoard . setTag ( tag ); Post score leaderBoard . post ( score ) // leaderBoard.post(score, extraData) // leaderBoard.post(score, extraData, timestamp) . then ( function ( record ) { }) . catch ( function ( error ) { }) score : A number, scores will be sorted descend. extraData : Extra data in JSON format. timestamp : Timestamp of posting. undefined : Current time. A number : For debug usage","title":"Post score"},{"location":"firebase-leaderboard/#get-my-score","text":"leaderBoard . getScore () // leaderBoard.getScore(userID) . then ( function ( score ) { }) . catch ( function ( error ) { }) userID : User ID, optional. undefined : Current user ID. score : Score object. Time filter enabled : {userID, scoreD, scoreW, scoreM, scoreY, tagD, tagW, tagM, tagY} scoreD , scoreW , scoreM , scoreY : Score of day/week/month/year. tagD , tagW , tagM , tagY : Time tag of day/week/month/year. Time filter disabled : {userID, score}","title":"Get my score"},{"location":"firebase-leaderboard/#get-my-rank","text":"leaderBoard . getRank () // leaderBoard.getRank(userID) . then ( function ( rank ) { }) . catch ( function ( error ) { }) userID : User ID, optional. undefined : Current user ID. rank : Rank object. {userID, rank}","title":"Get my rank"},{"location":"firebase-leaderboard/#get-scores","text":"Set board property, optional. Board ID leaderBoard . setBoardID ( boardID ); Custom tag leaderBoard . setTag ( tag ); Set time filter, optional. leaderBoard . setTimeFilterType ( type ); type : 'day' , or 'd' : Filter scores by current day. 'week' , or 'w' : Filter scores by current week. 'month' , 'm' : Filter scores by current month. 'year' , 'y' : Filter scores by current year. Load scores page by page. Load first page. leaderBoard . loadFirstPage () . then ( function ( scores ) { }) . catch ( function ( error ) { }) scores : An array of score object. Each score object is {userID, userName, socre} Load next page. leaderBoard . loadNextPage () . then ( function ( scores ) { }) . catch ( function ( error ) { }) scores : An array of score object. Each score object is {userID, userName, socre} Load previous page. leaderBoard . loadPreviousPage () . then ( function ( scores ) { }) . catch ( function ( error ) { }) scores : An array of score object. Each score object is {userID, userName, socre} Reload current page. leaderBoard . loadCurrentPage () . then ( function ( scores ) { }) . catch ( function ( error ) { }) scores : An array of score object. Each score object is {userID, userName, socre}","title":"Get scores"},{"location":"firebase-leaderboard/#page-index","text":"Current page index var pageIndex = leaderBoard . pageIndex ; Is first page var isFirstPage = leaderBoard . isFirstPage ; Is last page var isLastPage = leaderBoard . isLastPage ;","title":"Page index"},{"location":"firebase-leaderboard/#delete","text":"Delete user leaderBoard . deleteUserScore ( userID ) . then ( function (){ }) . catch ( function (){ }) Delete board leaderBoard . deleteBoard ( boardID , tag ) . then ( function (){ }) . catch ( function (){ })","title":"Delete"},{"location":"firebase-onlineuserlist/","text":"Introduction \u00b6 Online user list, using firebase-database . Author: Rex Usage \u00b6 Sample code Install plugin \u00b6 Load minify file \u00b6 Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add online-user-list object var userList = rexFire . add . onlineUserList ( config ); Import plugin \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add online-user-list object var userList = rexFire . add . onlineUserList ( config ); Import class \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { OnlineUserList } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add online-user-list object var userList = new OnlineUserList ( config ); Create instance \u00b6 var userList = rexFire . add . onlineUserList ({ root : '' , // maxUsers: 0 }); root : Path of this online user list. maxUsers : Maximum users in this list. Set to 0 to have infinity users. Join \u00b6 Set userID and user name. userList . setUser ( userID , userName ); or userList . setUser ({ userID : userID , userName : userName }); userID : User ID. userName : Display name. Join list. userList . join (); Leave \u00b6 userList . leave (); Kick user \u00b6 userList . leave ( userID ); Change user name \u00b6 userList . changeUserName ( newUserName ); User list \u00b6 Get users in user list var users = userList . getUsers (); users : Array of user {userID, userName} Is first user in user list? var isFirstUser = userList . isFirstUser ( userID ); // var isFirstUser = userList.isFirstUser(); // Current user is first user User list is full var isFull = userList . isFull (); Maximun users setting value var maxUsers = userList . maxUsers ; Current user is in list var isInList = userList . isInList ; Events \u00b6 Any user join userList . on ( 'join' , user ); user : {userID, userName} Any user leave userList . on ( 'leave' , user ); user : {userID, userName} User list updated, includes user join, user leave, and user name changed userList . on ( 'update' , users ); users : Array of user {userID, userName} User name is changed userList . on ( 'changename' , userID , userName , prevUserName );","title":"Online user list"},{"location":"firebase-onlineuserlist/#introduction","text":"Online user list, using firebase-database . Author: Rex","title":"Introduction"},{"location":"firebase-onlineuserlist/#usage","text":"Sample code","title":"Usage"},{"location":"firebase-onlineuserlist/#install-plugin","text":"","title":"Install plugin"},{"location":"firebase-onlineuserlist/#load-minify-file","text":"Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add online-user-list object var userList = rexFire . add . onlineUserList ( config );","title":"Load minify file"},{"location":"firebase-onlineuserlist/#import-plugin","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add online-user-list object var userList = rexFire . add . onlineUserList ( config );","title":"Import plugin"},{"location":"firebase-onlineuserlist/#import-class","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { OnlineUserList } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add online-user-list object var userList = new OnlineUserList ( config );","title":"Import class"},{"location":"firebase-onlineuserlist/#create-instance","text":"var userList = rexFire . add . onlineUserList ({ root : '' , // maxUsers: 0 }); root : Path of this online user list. maxUsers : Maximum users in this list. Set to 0 to have infinity users.","title":"Create instance"},{"location":"firebase-onlineuserlist/#join","text":"Set userID and user name. userList . setUser ( userID , userName ); or userList . setUser ({ userID : userID , userName : userName }); userID : User ID. userName : Display name. Join list. userList . join ();","title":"Join"},{"location":"firebase-onlineuserlist/#leave","text":"userList . leave ();","title":"Leave"},{"location":"firebase-onlineuserlist/#kick-user","text":"userList . leave ( userID );","title":"Kick user"},{"location":"firebase-onlineuserlist/#change-user-name","text":"userList . changeUserName ( newUserName );","title":"Change user name"},{"location":"firebase-onlineuserlist/#user-list","text":"Get users in user list var users = userList . getUsers (); users : Array of user {userID, userName} Is first user in user list? var isFirstUser = userList . isFirstUser ( userID ); // var isFirstUser = userList.isFirstUser(); // Current user is first user User list is full var isFull = userList . isFull (); Maximun users setting value var maxUsers = userList . maxUsers ; Current user is in list var isInList = userList . isInList ;","title":"User list"},{"location":"firebase-onlineuserlist/#events","text":"Any user join userList . on ( 'join' , user ); user : {userID, userName} Any user leave userList . on ( 'leave' , user ); user : {userID, userName} User list updated, includes user join, user leave, and user name changed userList . on ( 'update' , users ); users : Array of user {userID, userName} User name is changed userList . on ( 'changename' , userID , userName , prevUserName );","title":"Events"},{"location":"firebase-overview/","text":"Introduction \u00b6 Home page Available libraries Usage \u00b6 Install plugin \u00b6 Load minify file \u00b6 Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Import plugin \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase ();","title":"Overview"},{"location":"firebase-overview/#introduction","text":"Home page Available libraries","title":"Introduction"},{"location":"firebase-overview/#usage","text":"","title":"Usage"},{"location":"firebase-overview/#install-plugin","text":"","title":"Install plugin"},{"location":"firebase-overview/#load-minify-file","text":"Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"/__/firebase/7.7.0/firebase-firestore.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase ();","title":"Load minify file"},{"location":"firebase-overview/#import-plugin","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase ();","title":"Import plugin"},{"location":"firebase-singleroom/","text":"Introduction \u00b6 Chat room, using firebase-database . Author: Rex Usage \u00b6 Sample code Install plugin \u00b6 Load minify file \u00b6 Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add single-room object var room = rexFire . add . singleRoom ( config ); Import plugin \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add single-room object var room = rexFire . add . singleRoom ( config ); Import class \u00b6 Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { SingleRoom } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add single-room object var room = new SingleRoom ( config ); Create instance \u00b6 var room = rexFire . add . singleRoom ({ root : '' , // broadcast: true, // tables: undefined }); root : Path of this room. receiverID : ID of receiver/channel. broadcast : Broadcast chat messages. true : Enable broadcasting, without storing received (history) messages. Default behavior. false : Disable broadcasting. A JSON object : { history : 0 } history : Stored received (history) messages in client side. 0 , or false : No history message stored. -1 , or true : Infinity history message stored. i.e. store all messages from starting updating. A number larger then 0 : Length of stored history message. tables : Configuration of tables . undefined : No table. Array of table-config JSON object for each table. [ { key : tableKey , type : '1d' }, { ... } ] key : Unique name of this table. type : Table type. 1 , or '1d' : 1d table, indexing by (key0) 2 , or '2d' : 2d table, indexing by (key0, key1) 3 , or '3d' : 3d table, indexing by (key0, key1, key2) Join room \u00b6 Set userID and user name. room . setUser ( userID , userName ); userID : User ID. userName : Display name. Join room. room . joinRoom (); Leave room \u00b6 room . leaveRoom (); Kick user \u00b6 room . kickUser ( userID ); User list \u00b6 Get users in room(user list) var users = room . getUsers (); users : Array of user {userID, userName} Is first user in room(user list)? var isFirstUser = room . isFirstUser ( userID ); // var isFirstUser = room.isFirstUser(); // Current user is first user Room(user list) is full var isFull = room . isFull (); Maximun users setting value var maxUsers = room . maxUsers ; Current user is in room(user list) var isInRoom = room . isInRoom (); Send message \u00b6 room . broadcast . send ( message ); message : A string message, or a JSON data. Receive messages \u00b6 Register receive event room . on ( 'broadcast.receive' , function ( data ){ // var senderID = data.senderID; // var senderName = data.senderName; // var message = data.message; }) Only receive messages after joined room. Previous messages won't be got anymore. Received messages \u00b6 Received messages will be saved in client side. Get received (history) messages. var messages = room . broadcast . getHistory (); Clear history messages. room . broadcast . clearHistory (); Change user name \u00b6 room . changeUserName ( newUserName ); Tables \u00b6 Get table var table = room . getTable ( key ); key : Unique name of this table. Write \u00b6 See here Read \u00b6 See here Events \u00b6 User list events \u00b6 Any user join room . on ( 'userlist.join' , user ); user : {userID, userName} Any user leave room . on ( 'userlist.leave' , user ); user : {userID, userName} User list updated, includes user join, user leave, and user name changed room . on ( 'userlist.update' , users ); users : Array of user {userID, userName} User name is changed room . on ( 'userlist.changename' , userID , userName , prevUserName ); Broadcast events \u00b6 Receive message room . on ( 'broadcast.receive' , function ( data ){ // var senderID = data.senderID; // var senderName = data.senderName; // var message = data.message; }) Table events \u00b6 Event names of each table indexed by key init : tables.${key}.init update : tables.${key}.update addkey0 : tables.${key}.addkey0 removekey0 : tables.${key}.removekey0 changekey0 : tables.${key}.changekey0 addkey1 : tables.${key}.addkey1 removekey1 : tables.${key}.removekey1 changekey1 : tables.${key}.changekey1 addkey2 : tables.${key}.addkey2 removekey2 : tables.${key}.removekey2 changekey2 : tables.${key}.changekey2","title":"Single room"},{"location":"firebase-singleroom/#introduction","text":"Chat room, using firebase-database . Author: Rex","title":"Introduction"},{"location":"firebase-singleroom/#usage","text":"Sample code","title":"Usage"},{"location":"firebase-singleroom/#install-plugin","text":"","title":"Install plugin"},{"location":"firebase-singleroom/#load-minify-file","text":"Add Firebase SDKs , and rex-firebase minify javascript file < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > < script src = \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin var rexFire = new window . rexfirebase (); Add single-room object var room = rexFire . add . singleRoom ( config );","title":"Load minify file"},{"location":"firebase-singleroom/#import-plugin","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Get firebase plugin import RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js' ; var rexFire = new RexFirebase (); Add single-room object var room = rexFire . add . singleRoom ( config );","title":"Import plugin"},{"location":"firebase-singleroom/#import-class","text":"Install rex plugins from npm npm i phaser3-rex-plugins Add Firebase SDKs < body > <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services --> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> < script src = \"/__/firebase/7.7.0/firebase-app.js\" ></ script > <!-- Add Firebase products that you want to use --> < script src = \"/__/firebase/7.7.0/firebase-database.js\" ></ script > </ body > Initialize firebase application. firebase . initializeApp ({ apiKey : '...' , authDomain : '...' , databaseURL : '...' , projectId : '...' , storageBucket : '...' , messagingSenderId : '...' }) Import class import { SingleRoom } from 'phaser3-rex-plugins/plugins/firebase-components.js' ; Add single-room object var room = new SingleRoom ( config );","title":"Import class"},{"location":"firebase-singleroom/#create-instance","text":"var room = rexFire . add . singleRoom ({ root : '' , // broadcast: true, // tables: undefined }); root : Path of this room. receiverID : ID of receiver/channel. broadcast : Broadcast chat messages. true : Enable broadcasting, without storing received (history) messages. Default behavior. false : Disable broadcasting. A JSON object : { history : 0 } history : Stored received (history) messages in client side. 0 , or false : No history message stored. -1 , or true : Infinity history message stored. i.e. store all messages from starting updating. A number larger then 0 : Length of stored history message. tables : Configuration of tables . undefined : No table. Array of table-config JSON object for each table. [ { key : tableKey , type : '1d' }, { ... } ] key : Unique name of this table. type : Table type. 1 , or '1d' : 1d table, indexing by (key0) 2 , or '2d' : 2d table, indexing by (key0, key1) 3 , or '3d' : 3d table, indexing by (key0, key1, key2)","title":"Create instance"},{"location":"firebase-singleroom/#join-room","text":"Set userID and user name. room . setUser ( userID , userName ); userID : User ID. userName : Display name. Join room. room . joinRoom ();","title":"Join room"},{"location":"firebase-singleroom/#leave-room","text":"room . leaveRoom ();","title":"Leave room"},{"location":"firebase-singleroom/#kick-user","text":"room . kickUser ( userID );","title":"Kick user"},{"location":"firebase-singleroom/#user-list","text":"Get users in room(user list) var users = room . getUsers (); users : Array of user {userID, userName} Is first user in room(user list)? var isFirstUser = room . isFirstUser ( userID ); // var isFirstUser = room.isFirstUser(); // Current user is first user Room(user list) is full var isFull = room . isFull (); Maximun users setting value var maxUsers = room . maxUsers ; Current user is in room(user list) var isInRoom = room . isInRoom ();","title":"User list"},{"location":"firebase-singleroom/#send-message","text":"room . broadcast . send ( message ); message : A string message, or a JSON data.","title":"Send message"},{"location":"firebase-singleroom/#receive-messages","text":"Register receive event room . on ( 'broadcast.receive' , function ( data ){ // var senderID = data.senderID; // var senderName = data.senderName; // var message = data.message; }) Only receive messages after joined room. Previous messages won't be got anymore.","title":"Receive messages"},{"location":"firebase-singleroom/#received-messages","text":"Received messages will be saved in client side. Get received (history) messages. var messages = room . broadcast . getHistory (); Clear history messages. room . broadcast . clearHistory ();","title":"Received messages"},{"location":"firebase-singleroom/#change-user-name","text":"room . changeUserName ( newUserName );","title":"Change user name"},{"location":"firebase-singleroom/#tables","text":"Get table var table = room . getTable ( key ); key : Unique name of this table.","title":"Tables"},{"location":"firebase-singleroom/#write","text":"See here","title":"Write"},{"location":"firebase-singleroom/#read","text":"See here","title":"Read"},{"location":"firebase-singleroom/#events","text":"","title":"Events"},{"location":"firebase-singleroom/#user-list-events","text":"Any user join room . on ( 'userlist.join' , user ); user : {userID, userName} Any user leave room . on ( 'userlist.leave' , user ); user : {userID, userName} User list updated, includes user join, user leave, and user name changed room . on ( 'userlist.update' , users ); users : Array of user {userID, userName} User name is changed room . on ( 'userlist.changename' , userID , userName , prevUserName );","title":"User list events"},{"location":"firebase-singleroom/#broadcast-events","text":"Receive message room . on ( 'broadcast.receive' , function ( data ){ // var senderID = data.senderID; // var senderName = data.senderName; // var message = data.message; })","title":"Broadcast events"},{"location":"firebase-singleroom/#table-events","text":"Event names of each table indexed by key init : tables.${key}.init update : tables.${key}.update addkey0 : tables.${key}.addkey0 removekey0 : tables.${key}.removekey0 changekey0 : tables.${key}.changekey0 addkey1 : tables.${key}.addkey1 removekey1 : tables.${key}.removekey1 changekey1 : tables.${key}.changekey1 addkey2 : tables.${key}.addkey2 removekey2 : tables.${key}.removekey2 changekey2 : tables.${key}.changekey2","title":"Table events"}]}